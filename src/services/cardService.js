import api, { ApiError, NetworkError } from '../utils/api';

class CardService {
  /**
   * Fun√ß√£o auxiliar para tratamento de erros
   * @param {Error} error - Erro capturado
   * @param {string} operation - Nome da opera√ß√£o que falhou
   * @returns {Object} Objeto de erro padronizado
   */
  _handleError(error, operation) {
    console.error(`‚ùå Erro em ${operation}:`, error);
    
    if (error instanceof NetworkError) {
      return {
        success: false,
        error: 'Erro de conex√£o. Verifique sua internet e tente novamente.',
        type: 'network'
      };
    }
    
    if (error instanceof ApiError) {
      return {
        success: false,
        error: error.message,
        type: 'api',
        status: error.status
      };
    }
    
    return {
      success: false,
      error: error.message || `Erro inesperado em ${operation}`,
      type: 'unknown'
    };
  }

  /**
   * Obt√©m todos os cards de uma lista
   * @param {number} listId - ID da lista
   * @returns {Promise<Object>} Lista de cards
   */
  async getCards(listId) {
    try {
      console.log('üåê Fazendo requisi√ß√£o de cards para:', `/lists/${listId}/cards`);
      const response = await api.get(`/lists/${listId}/cards`);
      
      if (!response.data) {
        return {
          success: false,
          error: 'Dados de cards n√£o encontrados'
        };
      }
      
      console.log('‚úÖ Cards obtidos com sucesso:', response.data.length || 0, 'cards');
      return { success: true, cards: response.data };
    } catch (error) {
      return this._handleError(error, 'obter cards');
    }
  }

  /**
   * Obt√©m um card espec√≠fico por ID
   * @param {number} cardId - ID do card
   * @returns {Promise<Object>} Dados do card
   */
  async getCard(cardId) {
    try {
      console.log('üåê Fazendo requisi√ß√£o de card para:', `/cards/${cardId}`);
      const response = await api.get(`/cards/${cardId}`);
      
      if (!response.data) {
        return {
          success: false,
          error: 'Dados do card n√£o encontrados'
        };
      }
      
      console.log('‚úÖ Card obtido com sucesso');
      return { success: true, card: response.data };
    } catch (error) {
      return this._handleError(error, 'obter card');
    }
  }

  /**
   * Cria um novo card
   * @param {number} listId - ID da lista
   * @param {Object} cardData - Dados do card
   * @returns {Promise<Object>} Card criado
   */
  async createCard(listId, cardData) {
    try {
      console.log('üåê Fazendo requisi√ß√£o de cria√ß√£o de card para:', `/lists/${listId}/cards`);
      console.log('üì§ Dados enviados:', cardData);
      
      const response = await api.post(`/lists/${listId}/cards`, cardData);
      
      if (!response.data) {
        return {
          success: false,
          error: 'Dados do card criado n√£o encontrados'
        };
      }
      
      console.log('‚úÖ Card criado com sucesso');
      return { success: true, card: response.data };
    } catch (error) {
      return this._handleError(error, 'criar card');
    }
  }

  /**
   * Atualiza um card existente
   * @param {number} cardId - ID do card
   * @param {Object} cardData - Novos dados do card
   * @returns {Promise<Object>} Card atualizado
   */
  async updateCard(cardId, cardData) {
    try {
      console.log('üåê Fazendo requisi√ß√£o de atualiza√ß√£o de card para:', `/cards/${cardId}`);
      console.log('üì§ Dados enviados:', cardData);
      
      const response = await api.put(`/cards/${cardId}`, cardData);
      
      if (!response.data) {
        return {
          success: false,
          error: 'Dados do card atualizado n√£o encontrados'
        };
      }
      
      console.log('‚úÖ Card atualizado com sucesso');
      return { success: true, card: response.data };
    } catch (error) {
      return this._handleError(error, 'atualizar card');
    }
  }

  /**
   * Exclui um card
   * @param {number} cardId - ID do card
   * @returns {Promise<Object>} Resultado da exclus√£o
   */
  async deleteCard(cardId) {
    try {
      await api.delete(`/cards/${cardId}`);
      return { success: true };
    } catch (error) {
      console.error('Erro ao excluir card:', error);
      return {
        success: false,
        error: error.message || 'Erro ao excluir card'
      };
    }
  }

  /**
   * Move um card entre listas
   * @param {number} cardId - ID do card
   * @param {number} newListId - ID da nova lista
   * @param {number} newPosition - Nova posi√ß√£o na lista
   * @returns {Promise<Object>} Resultado da movimenta√ß√£o
   */
  async moveCard(cardId, newListId, newPosition) {
    try {
      const response = await api.put(`/cards/${cardId}/move`, {
        list_id: newListId,
        position: newPosition
      });
      return { success: true, card: response.data };
    } catch (error) {
      console.error('Erro ao mover card:', error);
      return {
        success: false,
        error: error.message || 'Erro ao mover card'
      };
    }
  }

  /**
   * Atribui um card a um usu√°rio
   * @param {number} cardId - ID do card
   * @param {number} userId - ID do usu√°rio
   * @returns {Promise<Object>} Resultado da atribui√ß√£o
   */
  async assignCard(cardId, userId) {
    try {
      const response = await api.put(`/cards/${cardId}/assign`, {
        assigned_user_id: userId
      });
      return { success: true, card: response.data };
    } catch (error) {
      console.error('Erro ao atribuir card:', error);
      return {
        success: false,
        error: error.message || 'Erro ao atribuir card'
      };
    }
  }

  /**
   * Remove atribui√ß√£o de um card
   * @param {number} cardId - ID do card
   * @returns {Promise<Object>} Resultado da remo√ß√£o
   */
  async unassignCard(cardId) {
    try {
      const response = await api.put(`/cards/${cardId}/assign`, {
        assigned_user_id: null
      });
      return { success: true, card: response.data };
    } catch (error) {
      console.error('Erro ao remover atribui√ß√£o:', error);
      return {
        success: false,
        error: error.message || 'Erro ao remover atribui√ß√£o'
      };
    }
  }

  /**
   * Obt√©m as tarefas do usu√°rio logado
   * @returns {Promise<Object>} Lista de tarefas
   */
  async getMyTasks() {
    try {
      const response = await api.get('/cards/my-tasks');
      return { success: true, tasks: response.data };
    } catch (error) {
      console.error('Erro ao obter tarefas:', error);
      return {
        success: false,
        error: error.message || 'Erro ao carregar tarefas'
      };
    }
  }

  /**
   * Obt√©m estat√≠sticas do dashboard do usu√°rio
   * @returns {Promise<Object>} Estat√≠sticas do dashboard
   */
  async getDashboardStats() {
    try {
      console.log('üìä Fazendo requisi√ß√£o de estat√≠sticas do dashboard...');
      const response = await api.get('/dashboard/stats');
      
      if (!response.data) {
        return {
          success: false,
          error: 'Dados de estat√≠sticas n√£o encontrados'
        };
      }
      
      console.log('‚úÖ Estat√≠sticas do dashboard obtidas com sucesso');
      return { success: true, stats: response.data };
    } catch (error) {
      console.error('‚ùå Erro ao obter estat√≠sticas do dashboard:', error);
      return {
        success: false,
        error: error.message || 'Erro ao carregar estat√≠sticas'
      };
    }
  }

  /**
   * Obt√©m tarefas filtradas por status
   * @param {string} status - Status das tarefas (completed, in_progress, pending, my_tasks)
   * @returns {Promise<Object>} Lista de tarefas filtradas
   */
  async getTasksByStatus(status) {
    try {
      console.log(`üîç Buscando tarefas com status: ${status}`);
      const response = await api.get(`/cards/filter`, {
        params: { status }
      });
      
      if (!response.data) {
        return {
          success: false,
          error: 'Dados de tarefas n√£o encontrados'
        };
      }
      
      console.log(`‚úÖ Tarefas ${status} obtidas com sucesso:`, response.data.length);
      return { success: true, tasks: response.data };
    } catch (error) {
      console.error(`‚ùå Erro ao obter tarefas ${status}:`, error);
      return {
        success: false,
        error: error.message || `Erro ao carregar tarefas ${status}`
      };
    }
  }

  /**
   * Obt√©m cards por filtros
   * @param {Object} filters - Filtros de busca
   * @returns {Promise<Object>} Lista de cards filtrados
   */
  async searchCards(filters) {
    try {
      const response = await api.get('/cards/search', { params: filters });
      return { success: true, cards: response.data };
    } catch (error) {
      console.error('Erro ao buscar cards:', error);
      return {
        success: false,
        error: error.message || 'Erro ao buscar cards'
      };
    }
  }

  /**
   * Adiciona um coment√°rio a um card
   * @param {number} cardId - ID do card
   * @param {string} content - Conte√∫do do coment√°rio
   * @returns {Promise<Object>} Coment√°rio criado
   */
  async addComment(cardId, content) {
    try {
      const response = await api.post(`/cards/${cardId}/comments`, {
        content
      });
      return { success: true, comment: response.data };
    } catch (error) {
      console.error('Erro ao adicionar coment√°rio:', error);
      return {
        success: false,
        error: error.message || 'Erro ao adicionar coment√°rio'
      };
    }
  }

  /**
   * Obt√©m coment√°rios de um card
   * @param {number} cardId - ID do card
   * @returns {Promise<Object>} Lista de coment√°rios
   */
  async getComments(cardId) {
    try {
      const response = await api.get(`/cards/${cardId}/comments`);
      return { success: true, comments: response.data };
    } catch (error) {
      console.error('Erro ao obter coment√°rios:', error);
      return {
        success: false,
        error: error.message || 'Erro ao carregar coment√°rios'
      };
    }
  }

  /**
   * Adiciona uma etiqueta a um card
   * @param {number} cardId - ID do card
   * @param {number} labelId - ID da etiqueta
   * @returns {Promise<Object>} Resultado da opera√ß√£o
   */
  async addLabel(cardId, labelId) {
    try {
      const response = await api.post(`/cards/${cardId}/labels`, {
        label_id: labelId
      });
      return { success: true, card: response.data };
    } catch (error) {
      console.error('Erro ao adicionar etiqueta:', error);
      return {
        success: false,
        error: error.message || 'Erro ao adicionar etiqueta'
      };
    }
  }

  /**
   * Remove uma etiqueta de um card
   * @param {number} cardId - ID do card
   * @param {number} labelId - ID da etiqueta
   * @returns {Promise<Object>} Resultado da opera√ß√£o
   */
  async removeLabel(cardId, labelId) {
    try {
      await api.delete(`/cards/${cardId}/labels/${labelId}`);
      return { success: true };
    } catch (error) {
      console.error('Erro ao remover etiqueta:', error);
      return {
        success: false,
        error: error.message || 'Erro ao remover etiqueta'
      };
    }
  }

  /**
   * Cria uma checklist em um card
   * @param {number} cardId - ID do card
   * @param {string} title - T√≠tulo da checklist
   * @returns {Promise<Object>} Checklist criada
   */
  async createChecklist(cardId, title) {
    try {
      const response = await api.post(`/cards/${cardId}/checklists`, {
        title
      });
      return { success: true, checklist: response.data };
    } catch (error) {
      console.error('Erro ao criar checklist:', error);
      return {
        success: false,
        error: error.message || 'Erro ao criar checklist'
      };
    }
  }

  /**
   * Obt√©m checklists de um card
   * @param {number} cardId - ID do card
   * @returns {Promise<Object>} Lista de checklists
   */
  async getChecklists(cardId) {
    try {
      const response = await api.get(`/cards/${cardId}/checklists`);
      return { success: true, checklists: response.data };
    } catch (error) {
      console.error('Erro ao obter checklists:', error);
      return {
        success: false,
        error: error.response?.data?.message || 'Erro ao carregar checklists'
      };
    }
  }
}

export default new CardService();
