import api, { ApiError, NetworkError } from '../utils/api';

class NotificationService {
  /**
   * Fun√ß√£o auxiliar para tratamento de erros
   * @param {Error} error - Erro capturado
   * @param {string} operation - Nome da opera√ß√£o que falhou
   * @returns {Object} Objeto de erro padronizado
   */
  _handleError(error, operation) {
    console.error(`‚ùå Erro em ${operation}:`, error);
    
    if (error instanceof NetworkError) {
      return {
        success: false,
        error: 'Erro de conex√£o. Verifique sua internet e tente novamente.',
        type: 'network'
      };
    }
    
    if (error instanceof ApiError) {
      return {
        success: false,
        error: error.message,
        type: 'api',
        status: error.status
      };
    }
    
    return {
      success: false,
      error: error.message || `Erro inesperado em ${operation}`,
      type: 'unknown'
    };
  }

  /**
   * Cria uma nova notifica√ß√£o
   * @param {Object} notificationData - Dados da notifica√ß√£o
   * @returns {Promise<Object>} Notifica√ß√£o criada
   */
  async createNotification(notificationData) {
    try {
      console.log('üåê Fazendo requisi√ß√£o de cria√ß√£o de notifica√ß√£o para:', '/notifications');
      console.log('üì§ Dados enviados:', notificationData);
      
      const response = await api.post('/notifications', notificationData);
      
      if (!response.data) {
        return {
          success: false,
          error: 'Dados da notifica√ß√£o criada n√£o encontrados'
        };
      }
      
      console.log('‚úÖ Notifica√ß√£o criada com sucesso');
      return { success: true, notification: response.data };
    } catch (error) {
      return this._handleError(error, 'criar notifica√ß√£o');
    }
  }

  /**
   * Obt√©m notifica√ß√µes do usu√°rio
   * @returns {Promise<Object>} Lista de notifica√ß√µes
   */
  async getNotifications() {
    try {
      console.log('üåê Fazendo requisi√ß√£o de notifica√ß√µes para:', '/notifications');
      const response = await api.get('/notifications');
      
      if (!response.data) {
        return {
          success: false,
          error: 'Dados de notifica√ß√µes n√£o encontrados'
        };
      }
      
      console.log('‚úÖ Notifica√ß√µes obtidas com sucesso:', response.data.length || 0, 'notifica√ß√µes');
      return { success: true, notifications: response.data };
    } catch (error) {
      return this._handleError(error, 'obter notifica√ß√µes');
    }
  }

  /**
   * Obt√©m notifica√ß√µes n√£o lidas
   * @returns {Promise<Object>} Lista de notifica√ß√µes n√£o lidas
   */
  async getUnreadNotifications() {
    try {
      console.log('üåê Fazendo requisi√ß√£o de notifica√ß√µes n√£o lidas para:', '/notifications/unread');
      const response = await api.get('/notifications/unread');
      
      if (!response.data) {
        return {
          success: false,
          error: 'Dados de notifica√ß√µes n√£o lidas n√£o encontrados'
        };
      }
      
      console.log('‚úÖ Notifica√ß√µes n√£o lidas obtidas com sucesso:', response.data.length || 0, 'notifica√ß√µes');
      return { success: true, notifications: response.data };
    } catch (error) {
      return this._handleError(error, 'obter notifica√ß√µes n√£o lidas');
    }
  }

  /**
   * Obt√©m estat√≠sticas de notifica√ß√µes
   * @returns {Promise<Object>} Estat√≠sticas de notifica√ß√µes
   */
  async getNotificationStats() {
    try {
      console.log('üåê Fazendo requisi√ß√£o de estat√≠sticas de notifica√ß√µes para:', '/notifications/stats');
      const response = await api.get('/notifications/stats');
      
      if (!response.data) {
        return {
          success: false,
          error: 'Dados de estat√≠sticas n√£o encontrados'
        };
      }
      
      console.log('‚úÖ Estat√≠sticas de notifica√ß√µes obtidas com sucesso');
      return { success: true, stats: response.data };
    } catch (error) {
      return this._handleError(error, 'obter estat√≠sticas de notifica√ß√µes');
    }
  }

  /**
   * Obt√©m uma notifica√ß√£o espec√≠fica por ID
   * @param {number} notificationId - ID da notifica√ß√£o
   * @returns {Promise<Object>} Dados da notifica√ß√£o
   */
  async getNotification(notificationId) {
    try {
      console.log('üåê Fazendo requisi√ß√£o de notifica√ß√£o para:', `/notifications/${notificationId}`);
      const response = await api.get(`/notifications/${notificationId}`);
      
      if (!response.data) {
        return {
          success: false,
          error: 'Dados da notifica√ß√£o n√£o encontrados'
        };
      }
      
      console.log('‚úÖ Notifica√ß√£o obtida com sucesso');
      return { success: true, notification: response.data };
    } catch (error) {
      return this._handleError(error, 'obter notifica√ß√£o');
    }
  }

  /**
   * Marca notifica√ß√µes como lidas
   * @param {Object} markData - Dados para marcar como lidas
   * @returns {Promise<Object>} Resultado da marca√ß√£o
   */
  async markAsRead(markData) {
    try {
      console.log('üåê Fazendo requisi√ß√£o de marca√ß√£o como lidas para:', '/notifications/mark-read');
      console.log('üì§ Dados enviados:', markData);
      
      const response = await api.put('/notifications/mark-read', markData);
      
      if (!response.data) {
        return {
          success: false,
          error: 'Dados da marca√ß√£o n√£o encontrados'
        };
      }
      
      console.log('‚úÖ Notifica√ß√µes marcadas como lidas com sucesso');
      return { success: true, data: response.data };
    } catch (error) {
      return this._handleError(error, 'marcar notifica√ß√µes como lidas');
    }
  }

  /**
   * Atualiza uma notifica√ß√£o
   * @param {number} notificationId - ID da notifica√ß√£o
   * @param {Object} notificationData - Novos dados da notifica√ß√£o
   * @returns {Promise<Object>} Notifica√ß√£o atualizada
   */
  async updateNotification(notificationId, notificationData) {
    try {
      console.log('üåê Fazendo requisi√ß√£o de atualiza√ß√£o de notifica√ß√£o para:', `/notifications/${notificationId}`);
      console.log('üì§ Dados enviados:', notificationData);
      
      const response = await api.put(`/notifications/${notificationId}`, notificationData);
      
      if (!response.data) {
        return {
          success: false,
          error: 'Dados da notifica√ß√£o atualizada n√£o encontrados'
        };
      }
      
      console.log('‚úÖ Notifica√ß√£o atualizada com sucesso');
      return { success: true, notification: response.data };
    } catch (error) {
      return this._handleError(error, 'atualizar notifica√ß√£o');
    }
  }

  /**
   * Deleta uma notifica√ß√£o
   * @param {number} notificationId - ID da notifica√ß√£o
   * @returns {Promise<Object>} Resultado da exclus√£o
   */
  async deleteNotification(notificationId) {
    try {
      await api.delete(`/notifications/${notificationId}`);
      return { success: true };
    } catch (error) {
      console.error('Erro ao deletar notifica√ß√£o:', error);
      return {
        success: false,
        error: error.message || 'Erro ao deletar notifica√ß√£o'
      };
    }
  }
}

export default new NotificationService();
